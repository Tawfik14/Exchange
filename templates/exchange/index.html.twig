{% extends 'base.html.twig' %}

{% block title %}Exchange Taux de change et Convertisseur{% endblock %}

{% block body %}
<div id="reservation" class="container" style="max-width: 1100px; margin: 2rem auto; font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;">
  <h1 style="margin: 0 0 1.25rem 0;">Exchange Taux</h1>
  <p style="color:#93a1c6; margin-bottom: 1.25rem;">Les cours Achat/Vente incluent une marge. Choisissez une devise pour chaque calculatrice, puis renseignez EUR ou la devise.</p>

  {% for message in app.flashes('error') %}
    <div style="background:rgba(255,0,0,0.08);color:#ffb4b4;padding:0.9rem 1.1rem;border:1px solid rgba(255,0,0,0.25);border-radius:12px;margin-bottom:1.25rem;">{{ message }}</div>
  {% endfor %}

  <div style="display:grid; grid-template-columns: 1fr; gap: 32px;">
    {# ===== TABLEAU DES TAUX ===== #}
    <section>
      <div style="background: rgba(255,255,255,0.03); border:1px solid var(--border); border-radius: 16px; overflow: hidden;">
        <table style="width:100%; border-collapse: collapse; table-layout: fixed;">
          <colgroup>
            <col style="width:22%;">
            <col style="width:20%;">
            <col style="width:8%;">
            <col style="width:13%;">
            <col style="width:13%;">
            <col style="width:12%;">
            <col style="width:12%;">
          </colgroup>
          <thead>
            <tr style="text-align:left; border-bottom:1px solid var(--border);">
              <th style="padding:20px;">Pays</th>
              <th style="padding:20px;">Devise</th>
              <th style="padding:20px;">Code</th>
              <th style="padding:20px;">EUR→Local Achat</th>
              <th style="padding:20px;">EUR→Local Vente</th>
              <th style="padding:20px;">Local→EUR Achat</th>
              <th style="padding:20px;">Local→EUR Vente</th>
            </tr>
          </thead>
          <tbody>
            {% for c in currencies %}
              {% set code = c.code %}
              {% set r = rates[code] ?? null %}
              <tr style="border-top:1px solid var(--border);">
                <td style="padding:20px;">{{ c.flag }} {{ c.country }}</td>
                <td style="padding:20px;">{{ c.currency }}</td>
                <td style="padding:20px; font-weight:600;">{{ code }}</td>
                <td style="padding:20px;">{% if r and r.buy  %}{{ r.buy|number_format(4, '.', ' ')  }}{% else %}-{% endif %}</td>
                <td style="padding:20px;">{% if r and r.sell %}{{ r.sell|number_format(4, '.', ' ') }}{% else %}-{% endif %}</td>
                <td style="padding:20px;">{% if r and r.buy and r.buy > 0 %}{{ (1 / r.buy)|number_format(4, '.', ' ') }}{% else %}-{% endif %}</td>
                <td style="padding:20px;">{% if r and r.sell and r.sell > 0 %}{{ (1 / r.sell)|number_format(4, '.', ' ') }}{% else %}-{% endif %}</td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    </section>

    {# ===== CALCULATEURS ===== #}
    <section class="calc-wrap">
      <style>
        .calc-wrap{ --card-bg: rgba(255,255,255,0.04); --border: rgba(148,163,184,0.25); --text:#e5ecff; --muted:#93a1c6; --grad1: linear-gradient(135deg,#4f7cff,#7f56d9 60%,#22d3ee); --grad2: linear-gradient(135deg,#22d3ee,#4f7cff 60%,#7f56d9) }
        .calc-wrap .card{ background: var(--card-bg); border:1px solid var(--border); border-radius:16px; padding:24px; backdrop-filter: blur(6px) }

        .calc-wrap .field{
          padding:12px 14px; border:1px solid var(--border); border-radius:12px;
          background:rgba(255,255,255,0.045); color:var(--text); width:100%;
        }
        .calc-wrap .field:focus{ outline:none; } /* aucun changement focus */

        .calc-wrap label{ font-weight:600; color: var(--text) }
        .calc-wrap input[type=number]::-webkit-outer-spin-button,
        .calc-wrap input[type=number]::-webkit-inner-spin-button{ -webkit-appearance:none; margin:0 }
        .calc-wrap input[type=number]{ -moz-appearance:textfield; appearance:textfield }

        /* === Boutons sans "lumière" ni ombre === */
        .calc-wrap .btn{
          appearance:none; border:0; padding:12px 16px; border-radius:12px;
          color:#fff; font-weight:700; cursor:pointer; width:100%;
          background-image: var(--grad1);
          transition: transform .08s;
          box-shadow: none;
          filter: none;
        }
        .calc-wrap .btn:hover{ filter: none; box-shadow: none; }
        .calc-wrap .btn:active{ transform: translateY(1px) scale(.997) }

        .calc-wrap .chip{ margin-top:12px; border:1px solid rgba(79,124,255,0.35); background: rgba(79,124,255,0.08); padding:12px; border-radius:12px; font-weight:600 }
        .calc-wrap .chip.alt{ border-color: rgba(127,86,217,0.35); background: rgba(127,86,217,0.08) }

        .calc-wrap .grid{ display:grid; grid-template-columns:1fr 1fr; gap:24px }
        @media(max-width:900px){ .calc-wrap .grid{ grid-template-columns:1fr } }

        .calc-wrap .calc-header{
          display:flex; align-items:center; gap:10px; margin:0 0 12px 0;
          font-weight:800; letter-spacing:.2px; background-image: var(--grad2);
          -webkit-background-clip:text; background-clip:text; color: transparent;
        }
        .calc-wrap .badge{ font-size:.8rem; font-weight:700; padding:4px 10px; border-radius:999px; color:white; background-image: var(--grad2) }
      </style>

      <div class="grid">
        <!-- BUY BOX -->
        <div class="card">
          <h2 class="calc-header">Exchange vous achète des devises <span class="badge">BUY</span></h2>
          <form id="buy-form" style="display:grid; gap: 12px;">
            <div style="display:grid; grid-template-columns: 1fr 1fr; gap:14px; align-items:center;">
              <label>Devise</label>
              <select name="buy_currency" class="field">
                {% for c in currencies %}
                  <option value="{{ c.code }}" {% if c.code == buySelected %}selected{% endif %}>{{ c.flag }} {{ c.country }} ({{ c.code }})</option>
                {% endfor %}
              </select>
              <label>Euros (EUR)</label>
              <input class="field" type="number" name="buy_eur" step="0.01" min="0" />
              <label>Montant en <span id="buy-currency-code">{{ buySelected }}</span></label>
              <input class="field" type="number" name="buy_local" step="0.01" min="0" />
            </div>
            <button type="submit" class="btn">Calculer</button>
          </form>
          <div id="buy-result" class="chip alt" style="display:none;"></div>
        </div>

        <!-- SELL BOX -->
        <div class="card">
          <h2 class="calc-header">Exchange vous vend des devises <span class="badge">SELL</span></h2>
          <form id="sell-form" style="display:grid; gap: 12px;">
            <div style="display:grid; grid-template-columns: 1fr 1fr; gap:14px; align-items:center;">
              <label>Devise</label>
              <select name="sell_currency" class="field">
                {% for c in currencies %}
                  <option value="{{ c.code }}" {% if c.code == sellSelected %}selected{% endif %}>{{ c.flag }} {{ c.country }} ({{ c.code }})</option>
                {% endfor %}
              </select>
              <label>Euros (EUR)</label>
              <input class="field" type="number" name="sell_eur" step="0.01" min="0" />
              <label>Montant en <span id="sell-currency-code">{{ sellSelected }}</span></label>
              <input class="field" type="number" name="sell_local" step="0.01" min="0" />
            </div>
            <button type="submit" class="btn">Calculer</button>
          </form>
          <div id="sell-result" class="chip alt" style="display:none;"></div>
        </div>
      </div>
    </section>
  </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', () => {
  const RATES = {{ rates|json_encode|raw }};
  const fmt2 = new Intl.NumberFormat('fr-FR',{minimumFractionDigits:2,maximumFractionDigits:2});

  const buyForm=document.getElementById('buy-form');
  const sellForm=document.getElementById('sell-form');
  const buySel=buyForm.querySelector('select[name="buy_currency"]');
  const sellSel=sellForm.querySelector('select[name="sell_currency"]');
  const buyEur=buyForm.querySelector('input[name="buy_eur"]');
  const buyLoc=buyForm.querySelector('input[name="buy_local"]');
  const sellEur=sellForm.querySelector('input[name="sell_eur"]');
  const sellLoc=sellForm.querySelector('input[name="sell_local"]');
  const buyRes=document.getElementById('buy-result');
  const sellRes=document.getElementById('sell-result');
  const buyCode=document.getElementById('buy-currency-code');
  const sellCode=document.getElementById('sell-currency-code');

  function getRate(c){return RATES?.[c]||null;}
  function show(el,html){el.innerHTML=html;el.style.display='block';}
  function hide(el){el.style.display='none';}

  // --- Réinitialisation champs & résultats ---
  function resetBuy(){ buyEur.value=''; buyLoc.value=''; hide(buyRes); }
  function resetSell(){ sellEur.value=''; sellLoc.value=''; hide(sellRes); }

  // --- On mémorise quel champ a été saisi par l'utilisateur (source) ---
  let buyPrimary = null;  // 'eur' | 'loc'
  let sellPrimary = null; // 'eur' | 'loc'

  // Synchroniser la devise entre BUY et SELL, et réinitialiser
  buySel.addEventListener('change',()=>{
    sellSel.value=buySel.value;
    buyCode.textContent=buySel.value;
    sellCode.textContent=buySel.value;
    buyPrimary = null; sellPrimary = null;
    resetBuy(); resetSell();
  });
  sellSel.addEventListener('change',()=>{
    buySel.value=sellSel.value;
    buyCode.textContent=sellSel.value;
    sellCode.textContent=sellSel.value;
    buyPrimary = null; sellPrimary = null;
    resetBuy(); resetSell();
  });

  // Quand on saisit dans un champ, l'autre se vide + on cache le résultat
  buyEur.addEventListener('input',()=>{ buyPrimary='eur'; buyLoc.value=''; hide(buyRes); });
  buyLoc.addEventListener('input',()=>{ buyPrimary='loc'; buyEur.value=''; hide(buyRes); });
  sellEur.addEventListener('input',()=>{ sellPrimary='eur'; sellLoc.value=''; hide(sellRes); });
  sellLoc.addEventListener('input',()=>{ sellPrimary='loc'; sellEur.value=''; hide(sellRes); });

  // --- Calculs BUY ---
  buyForm.addEventListener('submit',e=>{
    e.preventDefault();
    const c=buySel.value,r=getRate(c); if(!r) return;

    const eur=parseFloat(buyEur.value);
    const loc=parseFloat(buyLoc.value);

    // Saisie en EUR (source) -> EUR à gauche, devise à droite
    if(buyPrimary==='eur' && !isNaN(eur)){
      const L=eur*r.buy;
      buyLoc.value=L.toFixed(2);
      show(buyRes, `<strong>${fmt2.format(eur)} EUR</strong> ≈ <strong>${fmt2.format(L)} ${c}</strong> (BUY)`);
    }
    // Saisie en devise locale (source) -> devise à gauche, EUR à droite
    else if(buyPrimary==='loc' && !isNaN(loc)){
      const E=loc/r.buy;
      buyEur.value=E.toFixed(2);
      show(buyRes, `<strong>${fmt2.format(loc)} ${c}</strong> ≈ <strong>${fmt2.format(E)} EUR</strong> (BUY)`);
    }
  });

  // --- Calculs SELL ---
  sellForm.addEventListener('submit',e=>{
    e.preventDefault();
    const c=sellSel.value,r=getRate(c); if(!r) return;

    const eur=parseFloat(sellEur.value);
    const loc=parseFloat(sellLoc.value);

    // Saisie en devise locale (source) -> devise à gauche, EUR à droite
    if(sellPrimary==='loc' && !isNaN(loc)){
      const E=loc/r.sell;
      sellEur.value=E.toFixed(2);
      show(sellRes, `<strong>${fmt2.format(loc)} ${c}</strong> ≈ <strong>${fmt2.format(E)} EUR</strong> (SELL)`);
    }
    // Saisie en EUR (source) -> EUR à gauche, devise à droite
    else if(sellPrimary==='eur' && !isNaN(eur)){
      const L=eur*r.sell;
      sellLoc.value=L.toFixed(2);
      show(sellRes, `<strong>${fmt2.format(eur)} EUR</strong> ≈ <strong>${fmt2.format(L)} ${c}</strong> (SELL)`);
    }
  });
});
</script>
{% endblock %}

